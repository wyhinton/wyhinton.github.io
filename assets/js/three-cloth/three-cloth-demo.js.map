{
  "version": 3,
  "sources": ["../../../src/ts/three-cloth/three-cloth-demo.ts"],
  "sourcesContent": ["// Since we're using Three.js from CDN, we'll declare it as a global\r\ndeclare const THREE: any;\r\n\r\n// Define types for Three.js objects we use\r\ninterface ThreeVector3 {\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n  set(x: number, y: number, z: number): this;\r\n  copy(v: ThreeVector3): this;\r\n  clone(): ThreeVector3;\r\n  add(v: ThreeVector3): this;\r\n  addScaledVector(v: ThreeVector3, s: number): this;\r\n  subVectors(a: ThreeVector3, b: ThreeVector3): this;\r\n  multiplyScalar(s: number): this;\r\n  normalize(): this;\r\n  length(): number;\r\n}\r\n\r\ninterface ThreeCamera {\r\n  position: ThreeVector3;\r\n  aspect: number;\r\n  updateProjectionMatrix(): void;\r\n}\r\n\r\ninterface ThreeRenderer {\r\n  domElement: HTMLElement;\r\n  setSize(width: number, height: number): void;\r\n  render(scene: any, camera: any): void;\r\n  dispose(): void;\r\n}\r\n\r\ninterface ThreeGeometry {\r\n  attributes: {\r\n    position: {\r\n      array: Float32Array;\r\n      needsUpdate: boolean;\r\n    };\r\n  };\r\n  dispose(): void;\r\n  computeVertexNormals(): void;\r\n}\r\n\r\ninterface ThreeMaterial {\r\n  wireframe: boolean;\r\n  dispose(): void;\r\n}\r\n\r\ninterface ThreeMesh {\r\n  position: ThreeVector3;\r\n}\r\n\r\ninterface ThreeRaycaster {\r\n  ray: {\r\n    distanceToPoint(point: ThreeVector3): number;\r\n    at(t: number, target: ThreeVector3): ThreeVector3;\r\n  };\r\n  setFromCamera(coords: { x: number; y: number }, camera: ThreeCamera): void;\r\n}\r\n\r\ninterface ThreeOrbitControls {\r\n  enableDamping: boolean;\r\n  update(): void;\r\n}\r\n\r\ninterface Particle {\r\n  pos: ThreeVector3;\r\n  prev: ThreeVector3;\r\n  acc: ThreeVector3;\r\n  mass: number;\r\n  pinned: boolean;\r\n  idx: number;\r\n}\r\n\r\ninterface Spring {\r\n  a: number;\r\n  b: number;\r\n  rest: number;\r\n  k: number;\r\n}\r\n\r\ninterface ParticleSphere {\r\n  mesh: ThreeMesh;\r\n  idx: number;\r\n}\r\n\r\ninterface GravityState {\r\n  val: boolean;\r\n}\r\n\r\nexport class ThreeClothDemo {\r\n  private scene: any;\r\n  private renderer!: ThreeRenderer;\r\n  private camera!: ThreeCamera;\r\n  private controls!: ThreeOrbitControls;\r\n  \r\n  // Cloth parameters\r\n  private readonly clothW = 24;\r\n  private readonly clothH = 16;\r\n  private readonly spacing = 0.14;\r\n  private readonly restSpacing = 0.14;\r\n  private readonly sphereRadius = 1.0;\r\n  \r\n  // Physics state\r\n  private particles: Particle[] = [];\r\n  private springs: Spring[] = [];\r\n  private gravityOn: GravityState = { val: true };\r\n  \r\n  // Scene objects\r\n  private sphere: any;\r\n  private clothMesh: any;\r\n  private clothGeo: any;\r\n  private clothMat: any;\r\n  private particleSpheres: ParticleSphere[] = [];\r\n  \r\n  // Interaction\r\n  private ray: any;\r\n  private mouse: any;\r\n  private dragging: Particle | null = null;\r\n  \r\n  // Physics constants\r\n  private readonly dt = 1/60;\r\n  private readonly damping = 0.995;\r\n  private readonly gravity: any;\r\n  private readonly K_STRUCT = 8000;\r\n  private readonly contactGapMax = 0.02;\r\n  \r\n  private wireframe = false;\r\n\r\n  constructor(container: HTMLElement) {\r\n    // Initialize gravity and interaction objects\r\n    this.gravity = new THREE.Vector3(0, -9.81, 0);\r\n    this.ray = new THREE.Raycaster();\r\n    this.mouse = new THREE.Vector2();\r\n    \r\n    this.initScene(container);\r\n    this.createCloth();\r\n    this.setupLighting();\r\n    this.createObstacles();\r\n    this.createClothMesh();\r\n    this.createDebugSpheres();\r\n    this.setupInteraction();\r\n    this.animate();\r\n  }\r\n\r\n  private initScene(container: HTMLElement): void {\r\n    // Scene setup\r\n    this.scene = new THREE.Scene();\r\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n    container.appendChild(this.renderer.domElement);\r\n\r\n    // Camera\r\n    this.camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 0.1, 200);\r\n    this.camera.position.set(0, 3, 8);\r\n    \r\n    // Controls\r\n    this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\r\n    this.controls.enableDamping = true;\r\n\r\n    // Handle resize\r\n    window.addEventListener('resize', () => this.onWindowResize());\r\n  }\r\n\r\n  private setupLighting(): void {\r\n    // Ambient light\r\n    this.scene.add(new THREE.AmbientLight(0x888888));\r\n    \r\n    // Directional light\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.9);\r\n    directionalLight.position.set(5, 10, 7);\r\n    this.scene.add(directionalLight);\r\n  }\r\n\r\n  private createObstacles(): void {\r\n    // Sphere obstacle\r\n    const sphereMat = new THREE.MeshStandardMaterial({\r\n      color: 0x2266bb,\r\n      metalness: 0.3,\r\n      roughness: 0.6\r\n    });\r\n    \r\n    this.sphere = new THREE.Mesh(\r\n      new THREE.SphereGeometry(this.sphereRadius, 32, 24),\r\n      sphereMat\r\n    );\r\n    this.sphere.position.set(0, -0.5, 0);\r\n    this.scene.add(this.sphere);\r\n  }\r\n\r\n  private createCloth(): void {\r\n    // Create particle grid\r\n    for (let y = 0; y < this.clothH; y++) {\r\n      for (let x = 0; x < this.clothW; x++) {\r\n        const idx = y * this.clothW + x;\r\n        const px = (x - (this.clothW - 1) / 2) * this.spacing;\r\n        const py = 2.0 + (this.clothH - 1 - y) * this.spacing; // top down\r\n        const pz = 0;\r\n        const mass = 0.08;\r\n        \r\n        this.particles.push({\r\n          pos: new THREE.Vector3(px, py, pz),\r\n          prev: new THREE.Vector3(px, py, pz),\r\n          acc: new THREE.Vector3(),\r\n          mass,\r\n          pinned: (y === 0 && (x % 4 === 0)), // pin some top vertices\r\n          idx\r\n        });\r\n      }\r\n    }\r\n\r\n    // Create springs\r\n    for (let y = 0; y < this.clothH; y++) {\r\n      for (let x = 0; x < this.clothW; x++) {\r\n        // Structural springs\r\n        if (x < this.clothW - 1) {\r\n          this.addSpring(this.idx(x, y), this.idx(x + 1, y), this.restSpacing, this.K_STRUCT);\r\n        }\r\n        if (y < this.clothH - 1) {\r\n          this.addSpring(this.idx(x, y), this.idx(x, y + 1), this.restSpacing, this.K_STRUCT);\r\n        }\r\n        \r\n        // Shear springs\r\n        if (x < this.clothW - 1 && y < this.clothH - 1) {\r\n          this.addSpring(this.idx(x, y), this.idx(x + 1, y + 1), Math.sqrt(2) * this.restSpacing, this.K_STRUCT * 0.8);\r\n        }\r\n        if (x > 0 && y < this.clothH - 1) {\r\n          this.addSpring(this.idx(x, y), this.idx(x - 1, y + 1), Math.sqrt(2) * this.restSpacing, this.K_STRUCT * 0.8);\r\n        }\r\n        \r\n        // Bend springs (longer)\r\n        if (x < this.clothW - 2) {\r\n          this.addSpring(this.idx(x, y), this.idx(x + 2, y), this.restSpacing * 2, this.K_STRUCT * 0.25);\r\n        }\r\n        if (y < this.clothH - 2) {\r\n          this.addSpring(this.idx(x, y), this.idx(x, y + 2), this.restSpacing * 2, this.K_STRUCT * 0.25);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private idx(x: number, y: number): number {\r\n    return y * this.clothW + x;\r\n  }\r\n\r\n  private addSpring(a: number, b: number, rest: number, k: number): void {\r\n    this.springs.push({ a, b, rest, k });\r\n  }\r\n\r\n  private createClothMesh(): void {\r\n    // Create parametric geometry for cloth\r\n    this.clothGeo = new THREE.ParametricGeometry((u: any, v: any, target: any) => {\r\n      // Placeholder - we will update geometry from particles\r\n      target.set(0, 0, 0);\r\n    }, this.clothW - 1, this.clothH - 1);\r\n    \r\n    this.clothMat = new THREE.MeshStandardMaterial({\r\n      color: 0xffaa77,\r\n      side: THREE.DoubleSide,\r\n      metalness: 0.2,\r\n      roughness: 0.6,\r\n      wireframe: false\r\n    });\r\n    \r\n    this.clothMesh = new THREE.Mesh(this.clothGeo, this.clothMat);\r\n    this.scene.add(this.clothMesh);\r\n  }\r\n\r\n  private createDebugSpheres(): void {\r\n    // Create debug spheres for some particles\r\n    for (let i = 0; i < this.particles.length; i += Math.floor(this.particles.length / 200) + 1) {\r\n      const sphere = new THREE.Mesh(\r\n        new THREE.SphereGeometry(0.02, 8, 8),\r\n        new THREE.MeshStandardMaterial({ color: 0xff3333 })\r\n      );\r\n      this.scene.add(sphere);\r\n      this.particleSpheres.push({ mesh: sphere, idx: i });\r\n    }\r\n  }\r\n\r\n  private setupInteraction(): void {\r\n    this.renderer.domElement.addEventListener('pointerdown', (e: any) => this.onPointerDown(e));\r\n    this.renderer.domElement.addEventListener('pointerup', () => this.onPointerUp());\r\n    this.renderer.domElement.addEventListener('pointermove', (e: any) => this.onPointerMove(e));\r\n  }\r\n\r\n  private onPointerDown(e: any): void {\r\n    this.mouse.x = (e.clientX / window.innerWidth) * 2 - 1;\r\n    this.mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\r\n    this.ray.setFromCamera(this.mouse, this.camera);\r\n    \r\n    // Find nearest particle within threshold\r\n    let best: Particle | null = null;\r\n    let bestDistance = 0.12;\r\n    \r\n    for (const particle of this.particles) {\r\n      const distance = this.ray.ray.distanceToPoint(particle.pos);\r\n      if (distance < bestDistance) {\r\n        best = particle;\r\n        bestDistance = distance;\r\n      }\r\n    }\r\n    \r\n    if (best) {\r\n      this.dragging = best;\r\n    }\r\n  }\r\n\r\n  private onPointerUp(): void {\r\n    this.dragging = null;\r\n  }\r\n\r\n  private onPointerMove(e: any): void {\r\n    if (!this.dragging) return;\r\n    \r\n    this.mouse.x = (e.clientX / window.innerWidth) * 2 - 1;\r\n    this.mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\r\n    this.ray.setFromCamera(this.mouse, this.camera);\r\n    \r\n    // Project onto plane near camera for positioning\r\n    const targetPos = this.ray.ray.at(6, new THREE.Vector3());\r\n    \r\n    // Pull particle toward target by setting its position\r\n    this.dragging.pos.copy(targetPos);\r\n  }\r\n\r\n  private onWindowResize(): void {\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n    this.camera.aspect = window.innerWidth / window.innerHeight;\r\n    this.camera.updateProjectionMatrix();\r\n  }\r\n\r\n  private updateClothGeometry(): void {\r\n    const pos = this.clothGeo.attributes.position.array as Float32Array;\r\n    let k = 0;\r\n    \r\n    for (let y = 0; y < this.clothH - 1; y++) {\r\n      for (let x = 0; x < this.clothW - 1; x++) {\r\n        // Parametric geometry ordering is u-major; use particle positions of the corners of each quad's lower-left\r\n        const particle = this.particles[this.idx(x, y)];\r\n        pos[k++] = particle.pos.x;\r\n        pos[k++] = particle.pos.y;\r\n        pos[k++] = particle.pos.z;\r\n      }\r\n    }\r\n    \r\n    this.clothGeo.attributes.position.needsUpdate = true;\r\n    this.clothGeo.computeVertexNormals();\r\n  }\r\n\r\n  private physicsStep(): void {\r\n    // Reset accelerations\r\n    for (const particle of this.particles) {\r\n      particle.acc.set(0, 0, 0);\r\n    }\r\n\r\n    // Apply gravity\r\n    for (const particle of this.particles) {\r\n      if (!particle.pinned && this.gravityOn.val) {\r\n        particle.acc.addScaledVector(this.gravity, 1);\r\n      }\r\n    }\r\n\r\n    // Spring forces (Hooke's law)\r\n    for (const spring of this.springs) {\r\n      const particleA = this.particles[spring.a];\r\n      const particleB = this.particles[spring.b];\r\n      const direction = new THREE.Vector3().subVectors(particleB.pos, particleA.pos);\r\n      const length = direction.length() || 1e-8;\r\n      direction.multiplyScalar(1 / length);\r\n      const stretch = length - spring.rest;\r\n      \r\n      // Apply equal/opposite forces\r\n      const forceMagnitude = spring.k * stretch;\r\n      const force = direction.clone().multiplyScalar(forceMagnitude);\r\n      \r\n      if (!particleA.pinned) {\r\n        particleA.acc.addScaledVector(force, 1 / particleA.mass);\r\n      }\r\n      if (!particleB.pinned) {\r\n        particleB.acc.addScaledVector(force, -1 / particleB.mass);\r\n      }\r\n    }\r\n\r\n    // Contacts: sphere + cubic barrier\r\n    for (const particle of this.particles) {\r\n      // Compute signed gap = distance from sphere surface (positive outside)\r\n      const toParticle = new THREE.Vector3().subVectors(particle.pos, this.sphere.position);\r\n      const distance = toParticle.length();\r\n      const gap = distance - this.sphereRadius;\r\n      \r\n      if (gap <= this.contactGapMax) {\r\n        // Unit normal outward from sphere\r\n        const normal = toParticle.clone().normalize();\r\n        \r\n        // Approximate local elasticity projection as average spring stiffness magnitude around this particle\r\n        let localK = 0;\r\n        let count = 0;\r\n        \r\n        for (const spring of this.springs) {\r\n          if (spring.a === particle.idx || spring.b === particle.idx) {\r\n            localK += spring.k;\r\n            count++;\r\n          }\r\n        }\r\n        \r\n        if (count > 0) localK /= count;\r\n        \r\n        // Compute kappa (avoid tiny gap)\r\n        const gapSafe = Math.max(gap, 1e-6);\r\n        const kappa = particle.mass / (gapSafe * gapSafe) + localK * 1e-4; // scale localK down so it doesn't dominate\r\n        \r\n        // Force magnitude (derived from d\u03C8/dg)\r\n        const forceMagnitude = (2 * kappa / this.contactGapMax) * Math.pow(Math.max(this.contactGapMax - gap, 0), 2);\r\n        const force = normal.clone().multiplyScalar(-forceMagnitude); // negative: pushes outward (normal points from sphere center)\r\n        \r\n        if (!particle.pinned) {\r\n          particle.acc.addScaledVector(force, 1 / particle.mass);\r\n        }\r\n        \r\n        // Simple positional correction to avoid tunneling\r\n        const penetration = Math.max(0, this.sphereRadius - distance + 1e-6);\r\n        if (penetration > 1e-5 && !particle.pinned) {\r\n          particle.pos.add(normal.clone().multiplyScalar(penetration + 1e-5));\r\n        }\r\n      }\r\n    }\r\n\r\n    // Integrate (semi-implicit-ish)\r\n    for (const particle of this.particles) {\r\n      if (particle.pinned) {\r\n        particle.prev.copy(particle.pos);\r\n        continue;\r\n      }\r\n      \r\n      // Velocity estimate\r\n      const velocity = new THREE.Vector3().subVectors(particle.pos, particle.prev).multiplyScalar(this.damping);\r\n      \r\n      // Semi-implicit Euler: v += a * dt ; x += v * dt\r\n      velocity.addScaledVector(particle.acc, this.dt);\r\n      const newPos = particle.pos.clone().addScaledVector(velocity, this.dt);\r\n      \r\n      particle.prev.copy(particle.pos);\r\n      particle.pos.copy(newPos);\r\n    }\r\n  }\r\n\r\n  private animate = (): void => {\r\n    requestAnimationFrame(this.animate);\r\n    \r\n    // Run some physics substeps per render to stabilize\r\n    for (let i = 0; i < 2; i++) {\r\n      this.physicsStep();\r\n    }\r\n    \r\n    this.updateClothGeometry();\r\n    \r\n    // Update particle spheres for debugging\r\n    for (const particleSphere of this.particleSpheres) {\r\n      particleSphere.mesh.position.copy(this.particles[particleSphere.idx].pos);\r\n    }\r\n    \r\n    this.controls.update();\r\n    this.renderer.render(this.scene, this.camera);\r\n  };\r\n\r\n  // Public methods for UI controls\r\n  public toggleWireframe(): void {\r\n    this.wireframe = !this.wireframe;\r\n    this.clothMat.wireframe = this.wireframe;\r\n  }\r\n\r\n  public toggleGravity(): void {\r\n    this.gravityOn.val = !this.gravityOn.val;\r\n  }\r\n\r\n  public cleanup(): void {\r\n    // Clean up resources\r\n    this.renderer.dispose();\r\n    this.clothGeo.dispose();\r\n    this.clothMat.dispose();\r\n    \r\n    // Remove event listeners\r\n    window.removeEventListener('resize', this.onWindowResize);\r\n  }\r\n}\r\n\r\n// Initialize demo when DOM is loaded\r\nexport function initThreeClothDemo(): void {\r\n  // Create container with info panel\r\n  const container = document.createElement('div');\r\n  container.style.cssText = 'margin:0; overflow:hidden; background:#111; color:#ddd; font-family: sans-serif; position: relative; width: 100%; height: 100vh;';\r\n  \r\n  const info = document.createElement('div');\r\n  info.style.cssText = 'position: absolute; left: 10px; top: 10px; width: 320px; z-index: 10;';\r\n  info.innerHTML = `\r\n    <div><strong>Cubic Barrier + Elasticity-Inclusive Stiffness (simplified)</strong></div>\r\n    <div>Drag cloth vertices with mouse. Toggle gravity / wireframe.</div>\r\n    <div style=\"margin-top:6px;\">\r\n      <button id=\"toggleGravity\">Toggle Gravity</button>\r\n      <button id=\"toggleWire\">Toggle Wireframe</button>\r\n    </div>\r\n  `;\r\n  \r\n  container.appendChild(info);\r\n  document.body.appendChild(container);\r\n  \r\n  // Initialize demo\r\n  const demo = new ThreeClothDemo(container);\r\n  \r\n  // Setup UI event listeners\r\n  const toggleGravityBtn = document.getElementById('toggleGravity');\r\n  const toggleWireBtn = document.getElementById('toggleWire');\r\n  \r\n  if (toggleGravityBtn) {\r\n    toggleGravityBtn.addEventListener('click', () => demo.toggleGravity());\r\n  }\r\n  \r\n  if (toggleWireBtn) {\r\n    toggleWireBtn.addEventListener('click', () => demo.toggleWireframe());\r\n  }\r\n}\r\n\r\n// Auto-initialize if this script is loaded directly in browser\r\nif (typeof window !== 'undefined' && document.readyState === 'loading') {\r\n  document.addEventListener('DOMContentLoaded', initThreeClothDemo);\r\n} else if (typeof window !== 'undefined') {\r\n  initThreeClothDemo();\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
